{"name":"Target Macro","type":"script","author":"tXyJLVgERViy4mQ6","img":"icons/svg/dice-target.svg","scope":"global","command":"const target = game.user.targets.first();\n// Dice roll Prompt\nconst content = `\n  <form>\n    <div class=\"form-fields\">\n     <div class=\"form-group\">\n      <label for=\"number-of-dice\">Boons or Curses:</label>\n      <input type=\"number\" id=\"number-of-dice\" value=\"0\"></input>\n      </div>\n     <div class=\"form-group\">\n      <label for=\"damage-dice\">Number of damage dice:</label>\n      <input type=\"number\" id=\"damage-dice\" value=\"1\"></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"bonus-damage\">Bonus damage:</label>\n      <input type=\"number\" id=\"bonus-damage\" value=\"0\"></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"has-fray\">Add Fray?</label>\n      <input type=\"checkbox\" id=\"has-fray\" value=\"Fray\" checked></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"force-crit\">Force crit?</label>\n      <input type=\"checkbox\" id=\"force-crit\" value=\"force-crit\"></input>\n     </div>\n    </div>\n  </form><hr>`;\n\n// Chat Message for Results\nconst results = `\n {{Message}}\n<p style=\"background-color:#333 ; font-family:capitals; color:white; text-align:center;font-size:1.5em\">Attack!</p>\n {{AttackRoll}}\n<p style=\"background-color:#666; font-family:capitals; color:white; text-align:center;font-size:1.5em\">Damage Roll</p> \n{{DamageRoll}}\n`;\n\nnew Dialog({\n  title: \"Attack Macro\",\n  content,\n  buttons: {go: {\n    icon: `<i class=\"fas fa-check\"></i>`,\n    label: \"Roll\",\n    callback: async (html) => {\n      const num = Number(html[0].querySelector(\"input[id='number-of-dice']\").value);\n      const numDmg = Number(html[0].querySelector(\"input[id='damage-dice']\").value);\n      var bonus = Number(html[0].querySelector(\"input[id='bonus-damage']\").value);\n      const hasFray = (html[0].querySelector(\"input[id='has-fray']\").checked);\n      const forceCrit = (html[0].querySelector(\"input[id='force-crit']\").checked);\n      const damage = actor.data.data.attributes.Stats.Damage.value;\n      const fray = actor.data.data.attributes.Stats.Fray.value;\n\n      // create and evaluate the to-hit roll\n      const hitRoll = new Roll(`1d20 + ${num}d6kh1`);\n      await hitRoll.evaluate();\n      let messageHTML;\nif (target != null) {\n const targetValue = target.actor.data.data.attributes.Stats.Defense.value;\n  if(hitRoll.total>=20) messageHTML=`<p style=\"color:red\">You crit ${target.name}!</p>`;\n  else if(hitRoll.total>=targetValue) messageHTML=`<p style=\"color:red\">You hit ${target.name}!</p>`;\n  else messageHTML=`<p style=\"color:red\">You miss ${target.name}</p>`;\n} else {\n  // this is redundant with the critHTML variable later on in the code\n  if(hitRoll.total>=20) messageHTML=`<p style=\"color:red\">You crit!</p>`;\n  else messageHTML = ``;\n}\n      \n      // if we crit, we add another die, or add bonus die\n      const crit = hitRoll.total >= 20 || forceCrit\n      const critDie = crit ? 1 : 0;\n\n      // if we have a double crit, increase bonus damage\n      if (hitRoll.total >= 20 && forceCrit) {\n        bonus++;\n      }\n\n      // create and evaluate the damage roll\n      var dmgFormula = ``;\n      \n      if (bonus) {\n        dmgFormula = `${numDmg + bonus + (critDie)}d${damage}kh${numDmg + (critDie)}`\n      } else {\n        dmgFormula = `${numDmg + (critDie)}d${damage}`\n      }\n\n      if (hasFray) {\n        dmgFormula = dmgFormula + `+ ${fray}`\n      }\n      const dmgRoll = new Roll(dmgFormula);\n      await dmgRoll.evaluate();\n      \n      // We await these promises so we can get the HTML\n      const hitRender = hitRoll.render();\n      const dmgRender = dmgRoll.render();\n\n      Promise.all([hitRender, dmgRender]).then(async data => {\n        const hitHTML = data[0];\n        const dmgHTML = data[1];\n\n        // crappy templating\n        const html= results.replace(\"{{Message}}\", messageHTML).replace(\"{{AttackRoll}}\", hitHTML).replace(\"{{DamageRoll}}\", dmgHTML);\n        const chat_data = {\n          user: game.user,\n          speaker: ChatMessage.getSpeaker({actor}),\n          content: html\n        }\n\n        // create the chat message and output it to the sidebar\n        const cm =  ChatMessage.create(chat_data);\n        cm?.render();\n      })\n\n    }\n  }},\n  default: \"go\"\n}).render(true);","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.qJjdTq2Z3z00Bsya"}},"ownership":{"default":0,"tXyJLVgERViy4mQ6":3},"_stats":{"systemId":"worldbuilding","systemVersion":"0.7.1","coreVersion":"10.288","createdTime":1665678191993,"modifiedTime":1665678191993,"lastModifiedBy":"tXyJLVgERViy4mQ6"},"folder":null,"sort":0,"_id":"g6ORcGzhSnDZcz9j"}
{"$$deleted":true,"_id":"g6ORcGzhSnDZcz9j"}
{"name":"Target Macro (Crit)","type":"script","author":"tXyJLVgERViy4mQ6","img":"icons/svg/d20.svg","scope":"global","command":"const target = game.user.targets.first();\n// Dice roll Prompt\nconst content = `\n  <form>\n    <div class=\"form-fields\">\n     <div class=\"form-group\">\n      <label for=\"number-of-dice\">Boons or Curses:</label>\n      <input type=\"number\" id=\"number-of-dice\" value=\"0\"></input>\n      </div>\n     <div class=\"form-group\">\n      <label for=\"damage-dice\">Number of damage dice:</label>\n      <input type=\"number\" id=\"damage-dice\" value=\"1\"></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"bonus-damage\">Bonus damage:</label>\n      <input type=\"number\" id=\"bonus-damage\" value=\"0\"></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"has-fray\">Add Fray?</label>\n      <input type=\"checkbox\" id=\"has-fray\" value=\"Fray\" checked></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"force-crit\">Force crit?</label>\n      <input type=\"checkbox\" id=\"force-crit\" value=\"force-crit\"></input>\n</input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"hissatsu\">Hissatsu?</label>\n      <input type=\"checkbox\" id=\"hissatsu\" value=\"hissatsu\"></input>\n     </div>\n    </div>\n  </form><hr>`;\n\n// Chat Message for Results\nconst results = `\n {{Message}}\n<p style=\"background-color:#333 ; font-family:capitals; color:white; text-align:center;font-size:1.5em\">Attack!</p>\n {{AttackRoll}}\n<p style=\"background-color:#666; font-family:capitals; color:white; text-align:center;font-size:1.5em\">Damage Roll</p> \n{{DamageRoll}}\n`;\n\nnew Dialog({\n  title: \"Attack Macro\",\n  content,\n  buttons: {go: {\n    icon: `<i class=\"fas fa-check\"></i>`,\n    label: \"Roll\",\n    callback: async (html) => {\n      const num = Number(html[0].querySelector(\"input[id='number-of-dice']\").value);\n      const numDmg = Number(html[0].querySelector(\"input[id='damage-dice']\").value);\n      var bonus = Number(html[0].querySelector(\"input[id='bonus-damage']\").value);\n      const hasFray = (html[0].querySelector(\"input[id='has-fray']\").checked);\n      const forceCrit = (html[0].querySelector(\"input[id='force-crit']\").checked);\n      const hissatsu = (html[0].querySelector(\"input[id='hissatsu']\").checked);\n      var damage = actor.data.data.attributes.Stats.Damage.value;\n      var fray = actor.data.data.attributes.Stats.Fray.value;\n      if (hissatsu) {\n       damage = 10;\n       fray = 4;\n      }\n\n      // create and evaluate the to-hit roll\n      const hitRoll = new Roll(`1d20 + ${num}d6kh1`);\n      await hitRoll.evaluate();\n      let messageHTML;\nif (target != null) {\n const targetValue = target.actor.data.data.attributes.Stats.Defense.value;\n  if(hitRoll.total>=20) messageHTML=`<p style=\"color:red\">You crit ${target.name}!</p>`;\n  else if(hitRoll.total>=targetValue) messageHTML=`<p style=\"color:red\">You hit ${target.name}!</p>`;\n  else messageHTML=`<p style=\"color:red\">You miss ${target.name}</p>`;\n} else {\n  // this is redundant with the critHTML variable later on in the code\n  if(hitRoll.total>=20) messageHTML=`<p style=\"color:red\">You crit!</p>`;\n  else messageHTML = ``;\n}\n      \n      // if we crit, we add another die, or add bonus die\n      const crit = hitRoll.total >= 20 || forceCrit\n      const critDie = crit ? 1 : 0;\n\n      // if we have a double crit, increase bonus damage\n      if (hitRoll.total >= 20 && forceCrit) {\n        bonus++;\n      }\n\n      // create and evaluate the damage roll\n      var dmgFormula = ``;\n      \n      if (bonus) {\n        dmgFormula = `${numDmg + bonus + (critDie)}d${damage}kh${numDmg + (critDie)}`\n      } else {\n        dmgFormula = `${numDmg + (critDie)}d${damage}`\n      }\n\n      if (hasFray) {\n        dmgFormula = dmgFormula + `+ ${fray}`\n      }\n      const dmgRoll = new Roll(dmgFormula);\n      await dmgRoll.evaluate();\n      \n      // We await these promises so we can get the HTML\n      const hitRender = hitRoll.render();\n      const dmgRender = dmgRoll.render();\n\n      Promise.all([hitRender, dmgRender]).then(async data => {\n        const hitHTML = data[0];\n        const dmgHTML = data[1];\n\n        // crappy templating\n        const html= results.replace(\"{{Message}}\", messageHTML).replace(\"{{AttackRoll}}\", hitHTML).replace(\"{{DamageRoll}}\", dmgHTML);\n        const chat_data = {\n          user: game.user,\n          speaker: ChatMessage.getSpeaker({actor}),\n          content: html\n        }\n\n        // create the chat message and output it to the sidebar\n        const cm =  ChatMessage.create(chat_data);\n        cm?.render();\n      })\n\n    }\n  }},\n  default: \"go\"\n}).render(true);","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.qJjdTq2Z3z00Bsya"}},"ownership":{"default":0,"tXyJLVgERViy4mQ6":3},"_stats":{"systemId":"worldbuilding","systemVersion":"0.7.1","coreVersion":"10.288","createdTime":1666016124968,"modifiedTime":1666016124968,"lastModifiedBy":"tXyJLVgERViy4mQ6"},"folder":null,"sort":0,"_id":"KOraPYYkloXrtevK"}
{"name":"Target Macro (No Crit)","type":"script","scope":"global","author":"tXyJLVgERViy4mQ6","img":"icons/svg/d20-black.svg","command":"const target = game.user.targets.first();\n// Dice roll Prompt\nconst content = `\n  <form>\n    <div class=\"form-fields\">\n     <div class=\"form-group\">\n      <label for=\"number-of-dice\">Boons or Curses:</label>\n      <input type=\"number\" id=\"number-of-dice\" value=\"0\"></input>\n      </div>\n     <div class=\"form-group\">\n      <label for=\"damage-dice\">Number of damage dice:</label>\n      <input type=\"number\" id=\"damage-dice\" value=\"1\"></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"bonus-damage\">Bonus damage:</label>\n      <input type=\"number\" id=\"bonus-damage\" value=\"0\"></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"has-fray\">Add Fray?</label>\n      <input type=\"checkbox\" id=\"has-fray\" value=\"Fray\" checked></input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"force-crit\">Force crit?</label>\n      <input type=\"checkbox\" id=\"force-crit\" value=\"force-crit\"></input>\n</input>\n     </div>\n     <div class=\"form-group\">\n      <label for=\"hissatsu\">Hissatsu?</label>\n      <input type=\"checkbox\" id=\"hissatsu\" value=\"hissatsu\"></input>\n     </div>\n    </div>\n  </form><hr>`;\n\n// Chat Message for Results\nconst results = `\n {{Message}}\n<p style=\"background-color:#333 ; font-family:capitals; color:white; text-align:center;font-size:1.5em\">Attack!</p>\n {{AttackRoll}}\n<p style=\"background-color:#666; font-family:capitals; color:white; text-align:center;font-size:1.5em\">Damage Roll</p> \n{{DamageRoll}}\n`;\n\nnew Dialog({\n  title: \"Attack Macro\",\n  content,\n  buttons: {go: {\n    icon: `<i class=\"fas fa-check\"></i>`,\n    label: \"Roll\",\n    callback: async (html) => {\n      const num = Number(html[0].querySelector(\"input[id='number-of-dice']\").value);\n      const numDmg = Number(html[0].querySelector(\"input[id='damage-dice']\").value);\n      var bonus = Number(html[0].querySelector(\"input[id='bonus-damage']\").value);\n      const hasFray = (html[0].querySelector(\"input[id='has-fray']\").checked);\n      const forceCrit = (html[0].querySelector(\"input[id='force-crit']\").checked);\n      const hissatsu = (html[0].querySelector(\"input[id='hissatsu']\").checked);\n      var damage = actor.data.data.attributes.Stats.Damage.value;\n      var fray = actor.data.data.attributes.Stats.Fray.value;\n      if (hissatsu) {\n       damage = 10;\n       fray = 4;\n      }\n\n      // create and evaluate the to-hit roll\n      const hitRoll = new Roll(`1d20 + ${num}d6kh1`);\n      await hitRoll.evaluate();\n      let messageHTML;\nif (target != null) {\n const targetValue = target.actor.data.data.attributes.Stats.Defense.value;\n  if(hitRoll.total>=20) messageHTML=`<p style=\"color:red\">You crit ${target.name}!</p>`;\n  else if(hitRoll.total>=targetValue) messageHTML=`<p style=\"color:red\">You hit ${target.name}!</p>`;\n  else messageHTML=`<p style=\"color:red\">You miss ${target.name}</p>`;\n} else {\n  // this is redundant with the critHTML variable later on in the code\n  if(hitRoll.total>=20) messageHTML=`<p style=\"color:red\">You crit!</p>`;\n  else messageHTML = ``;\n}\n      \n      // if we crit, we add another die, or add bonus die\n      const crit = forceCrit\n      const critDie = crit ? 1 : 0;\n\n      // create and evaluate the damage roll\n      var dmgFormula = ``;\n      \n      if (bonus) {\n        dmgFormula = `${numDmg + bonus + (critDie)}d${damage}kh${numDmg + (critDie)}`\n      } else {\n        dmgFormula = `${numDmg + (critDie)}d${damage}`\n      }\n\n      if (hasFray) {\n        dmgFormula = dmgFormula + `+ ${fray}`\n      }\n      const dmgRoll = new Roll(dmgFormula);\n      await dmgRoll.evaluate();\n      \n      // We await these promises so we can get the HTML\n      const hitRender = hitRoll.render();\n      const dmgRender = dmgRoll.render();\n\n      Promise.all([hitRender, dmgRender]).then(async data => {\n        const hitHTML = data[0];\n        const dmgHTML = data[1];\n\n        // crappy templating\n        const html= results.replace(\"{{Message}}\", messageHTML).replace(\"{{AttackRoll}}\", hitHTML).replace(\"{{DamageRoll}}\", dmgHTML);\n        const chat_data = {\n          user: game.user,\n          speaker: ChatMessage.getSpeaker({actor}),\n          content: html\n        }\n\n        // create the chat message and output it to the sidebar\n        const cm =  ChatMessage.create(chat_data);\n        cm?.render();\n      })\n\n    }\n  }},\n  default: \"go\"\n}).render(true);","ownership":{"default":0,"tXyJLVgERViy4mQ6":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.DXHOh2WUateNRBdg"}},"_stats":{"systemId":"worldbuilding","systemVersion":"0.7.1","coreVersion":"10.288","createdTime":1666013239684,"modifiedTime":1666016126412,"lastModifiedBy":"tXyJLVgERViy4mQ6"},"folder":null,"sort":0,"_id":"TMy4gnSd2dYDzQiF"}
